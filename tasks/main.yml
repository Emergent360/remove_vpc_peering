---
# tasks file for remove_vpc_peering
- name: set ec2_vpc_name
  set_fact: ec2_vpc_name="{{ ec2_name_prefix }}-vpc"

- name: Get the VPC ID for "{{ ec2_vpc_name }}"
  ec2_vpc_net_info:
    filters:
      "tag:Name": "{{ ec2_vpc_name }}"
    region: "{{ ec2_region }}"
  register: vpc_net_info

- name: vpc_net_info
  debug:
    msg: "{{ vpc_net_info }}"

#- debug: msg="{{ (vpc_subnet_facts.subnets | selectattr('tags.Name','equalto','mytag1') | first).id }}"
- debug: msg="{{ (vpc_net_info.vpcs | selectattr('tags.Name','equalto', ec2_vpc_name ) | first).vpc_id }}"

- name: set ec2_vpc_id
  set_fact: ec2_vpc_id="{{ (vpc_net_info.vpcs | selectattr('tags.Name','equalto', ec2_vpc_name ) | first).vpc_id }}"

- name: List all vpc peers
  ec2_vpc_peering_info:
    region: "{{ ec2_region }}"
    filters:
      requester-vpc-info.vpc-id: "{{ vpc_net_info.vpcs[0].id }}"
  register: vpc_peer

- name: vpc_peer.result from ec2_vpc_peering_info
  debug:
    msg: "{{ vpc_peer.result }}"

- name: Get route table info for vpc peer target
  ec2_vpc_route_table_info:
    region: "{{ ec2_region }}"
  register: rtb_info

- name: rtb_info
  debug:
    msg: "{{ rtb_info }}"

#- debug: msg="{{ (rtb_info | selectattr('tags.Name','equalto','mytag1') | first).id }}"

#- name: delete a local VPC peering Connection
#  ec2_vpc_peer:
#    region: "{{ ec2_region }}"
#    peering_id: "{{ vpc_peer.result[0].vpc_peering_connection_id }}"
#    state: absent
#  register: vpc_peer

- name: vpc_peer after deletion
  debug:
    msg: "{{ vpc_peer }}"